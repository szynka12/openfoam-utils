/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

L   #eval{ 2*pi() };
H   1.0;
H2  #eval{ 2*$H };
W   #eval{ pi() };

nx 1;
ny 20;
nz 1;

//nx 256;
//ny 97;
//nz 192;

gy 10;

vertices
(
    (0    0     0)
    ($L   0     0)
    (0    $H    0)
    ($L   $H    0)
    (0    $H2   0)
    ($L   $H2   0)
    (0    0     $W)
    ($L   0     $W)
    (0    $H    $W)
    ($L   $H    $W)
    (0    $H2   $W)
    ($L   $H2   $W)
);

blocks
(
    hex (0 1 3 2 6 7 9 8)   ($nx $ny $nz) simpleGrading (1  $gy 1)  
    hex (2 3 5 4 8 9 11 10) ($nx $ny $nz) simpleGrading (1 #eval{ -$gy } 1)
);

edges
(
);

boundary
(
    bottom
    {
        type            wall;
        faces           ((0 1 7 6));
    }
    top
    {
        type            wall;
        faces           ((4 10 11 5));
    }

    outlet
    {
        type            cyclic;
        neighbourPatch  inlet;
        faces           
        (
            (1 3 9 7)
            (3 5 11 9)
        );
    }
    
    inlet
    {
        type            cyclic;
        neighbourPatch  outlet;
        faces           
        (
            (0 6 8 2)
            (2 8 10 4)
        );
    }

    left
    {
        type            cyclic;
        neighbourPatch  right;
        faces           
        (
            (0 2 3 1)
            (2 4 5 3)
        );
    }
    right
    {
        type            cyclic;
        neighbourPatch  left;
        faces           
        (
            (6 7 9 8)
            (8 9 11 10)
        );
    }

);

mergePatchPairs
(
);

// ************************************************************************* //

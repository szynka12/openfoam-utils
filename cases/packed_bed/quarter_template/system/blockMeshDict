/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2;
    format          ascii;
    class           dictionary;
    object          blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 1;


//keywoards here are for sed, replace for normalmesh generation
i     index1;
j     index2;
k     index3;

//i     1;
//j     1;
//k     1;

r     0.5;

ox    #eval{ 2 * ($i - 0.5 ) * $r };
oy    #eval{ 2 * ($j - 0.5 ) * $r };
oz    #eval{ 2 * ($k - 0.5 ) * $r };
translation vector ($ox , $oy , $oz);


layers  10;
N       7;

rsq2  #eval{ $r / sqrt(2)};
rsq3  #eval{ $r / sqrt(3)};

geometry
{
    sphere
    {
        type            sphere;
        origin          ( $ox $oy $oz );
        radius          $r;
    }
}

vertices        
( 
    #eval{$translation + vector($r, 0, 0)}
    #eval{$translation + vector($r, $r, 0)}
    #eval{$translation + vector($rsq2, $rsq2, 0)}
    #eval{$translation + vector($r, 0, $r)}
    #eval{$translation + vector($r,$r,$r)}
    #eval{$translation + vector($rsq3, $rsq3, $rsq3)}
    #eval{$translation + vector($rsq2, 0, $rsq2)}
    #eval{$translation + vector(0, $rsq2, $rsq2)} 
    #eval{$translation + vector(0, $r, $r)} 
    #eval{$translation + vector(0, 0, $r )}
    #eval{$translation + vector(0, $r, 0)} 
);


ones            1 1 1 1;
st_e            2;
cr_e            1.3;
st_e_           #eval{1 / $st_e};
cr_e_           #eval{1/$cr_e};

div ($N $layers $N);

blocks          
( 
    hex ( 0 1 2 0 3 4 5 6 )   $div edgeGrading ( $st_e  $cr_e  1 1 $ones $st_e 1 1 $cr_e ) 
    hex ( 9 3 6 9 8 4 5 7 )   $div edgeGrading ( $st_e  $cr_e  1 1 $ones $st_e 1 1 $cr_e ) 
    hex ( 1 10 10 2 4 8 7 5 ) $div edgeGrading ( $st_e_ $cr_e_ 1 1 $ones 1 $st_e $cr_e 1 ) 
);

edges           
( 
    project 0 2 ( sphere ) 
    project 0 6 ( sphere ) 
    project 6 5 ( sphere )
    project 5 2 ( sphere )
    project 6 9 ( sphere )
    project 7 9 ( sphere )
    project 7 5 ( sphere )
    project 7 10 ( sphere )
    project 2 10 ( sphere ) 
);

faces           
(
    project ( 0 6 5 2 ) sphere
    project ( 9 6 5 7 ) sphere
    project ( 7 10 2 5 ) sphere 
);

boundary        
( 
    x
    {
        type patch;
        faces ((0 1 4 3));
    }
    y
    {
        type patch;
        faces ((1 10 8 4));
    }
    z
    {
        type patch;
        faces ((3 4 8 9));
    }
    sphere
    {
        type patch;
        faces 
        (
            ( 0 6 5 2 ) 
            ( 9 6 5 7 ) 
            ( 7 10 2 5 )
        );
    }
    internal
    {
        type patch;
        faces 
        (
          (3 6 0 0)
          (3 9 9 6)
          (9 8 7 9)
          (8 10 10 7)
          (10 10 1 2)
          (1 0 0 2)
        );
    }

);


// ************************************************************************* //

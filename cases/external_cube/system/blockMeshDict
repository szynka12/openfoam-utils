/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale    1;

r 1;
R 2;

x 4;
y 4; 
z 4;

geometry
{
  sph_i
  {
    type sphere;
    origin (0 0 0);
    radius $r;
  }
  
  sph_e
  {
    type sphere;
    origin (0 0 0);
    radius $R;
  }
}

rsq3 #eval{$r / sqrt(3)};
Rsq3 #eval{$R / sqrt(3)};

bl 10;
N 5;
out 6;

vertices
(
  project (-1 -1 -1) (sph_e)
  project (1 -1 -1) (sph_e)
  project (1 -1 -1) (sph_i)
  project (-1 -1 -1) (sph_i)
  project (-1 -1 1) (sph_e)
  project (1 -1 1) (sph_e)
  project (1 -1 1) (sph_i)
  project (-1 -1 1) (sph_i)

  project (1 1 -1) (sph_e)
  project (1 1 -1) (sph_i)
  project (1 1 1) (sph_e)
  project (1 1 1) (sph_i) //11
  
  project (-1 1 -1) (sph_e)
  project (-1 1 -1) (sph_i)
  project (-1 1 1) (sph_e)
  project (-1 1 1) (sph_i) //15

  #eval{ vector ( -$Rsq3, -$y, -$Rsq3) }
  #eval{ vector ( $Rsq3, -$y, -$Rsq3) }
  #eval{ vector ( -$Rsq3, -$y, $Rsq3) }
  #eval{ vector ( $Rsq3, -$y, $Rsq3) } //19

  #eval{ vector ( $x, -$Rsq3, -$Rsq3 ) }
  #eval{ vector ( $x, $Rsq3, -$Rsq3 ) }
  #eval{ vector ( $x, -$Rsq3, $Rsq3 ) }
  #eval{ vector ( $x, $Rsq3, $Rsq3 ) } //23
  
  #eval{ vector ( $Rsq3, $y, -$Rsq3 ) }
  #eval{ vector ( -$Rsq3, $y, -$Rsq3 ) }
  #eval{ vector ( $Rsq3, $y, $Rsq3 ) }
  #eval{ vector ( -$Rsq3, $y, $Rsq3 ) } //27

  #eval{ vector ( -$x, $Rsq3, -$Rsq3 ) }
  #eval{ vector ( -$x, -$Rsq3, -$Rsq3 ) }
  #eval{ vector ( -$x, $Rsq3, $Rsq3 ) }
  #eval{ vector ( -$x, -$Rsq3, $Rsq3 ) } //31

  #eval{ vector ( $Rsq3, -$Rsq3, -$z ) }
  #eval{ vector ( -$Rsq3, -$Rsq3, -$z ) }
  #eval{ vector ( $Rsq3, $Rsq3, -$z ) }
  #eval{ vector ( -$Rsq3, $Rsq3, -$z ) } //35

  #eval{ vector ( $Rsq3, -$Rsq3, $z ) }
  #eval{ vector ( $Rsq3, $Rsq3, $z ) }
  #eval{ vector ( -$Rsq3, $Rsq3, $z ) }
  #eval{ vector ( -$Rsq3, -$Rsq3, $z ) } //39

  #eval{ vector ( $x, -$Rsq3, -$z ) } 
  #eval{ vector ( $x, $Rsq3, -$z ) } //41

  #eval{ vector ( $x, -$Rsq3, $z ) } 
  #eval{ vector ( $x, $Rsq3, $z ) } //43

  #eval{ vector ( -$x, -$Rsq3, -$z ) } 
  #eval{ vector ( -$x, $Rsq3, -$z ) } //45
  
  #eval{ vector ( -$x, -$Rsq3, $z ) } 
  #eval{ vector ( -$x, $Rsq3, $z ) } //47
  
  #eval{ vector ( -$Rsq3, -$y, -$z ) } 
  #eval{ vector ( $Rsq3, -$y, -$z ) } //49
  
  #eval{ vector ( -$Rsq3, $y, -$z ) } 
  #eval{ vector ( $Rsq3, $y, -$z ) } //51
);

blocks
(
  hex (0 1 2 3 4 5 6 7)       ($N $bl $N) simpleGrading (1 1 1)
  hex (1 8 9 2 5 10 11 6)     ($N $bl $N) simpleGrading (1 1 1)
  hex (8 12 13 9 10 14 15 11) ($N $bl $N) simpleGrading (1 1 1)
  hex (12 0 3 13 14 4 7 15)   ($N $bl $N) simpleGrading (1 1 1)
  hex (5 10 11 6 4 14 15 7)   ($N $bl $N) simpleGrading (1 1 1)
  hex (3 2 1 0 13 9 8 12)     ($N $bl $N) simpleGrading (1 1 1)

  hex (16 17 1 0 18 19 5 4)    ($N $out $N) simpleGrading (1 1 1)
  hex (20 21 8 1 22 23 10 5)   ($N $out $N) simpleGrading (1 1 1)
  hex (24 25 12 8 26 27 14 10) ($N $out $N) simpleGrading (1 1 1)
  hex (28 29 0 12 30 31 4 14) ($N $out $N) simpleGrading (1 1 1)
  hex (0 1 32 33 12 8 34 35) ($N $out $N) simpleGrading (1 1 1)
  hex (36 37 10 5 39 38 14 4) ($N $out $N) simpleGrading (1 1 1)

  hex (32 40 41 34 1 20 21 8) ($out $N $out) simpleGrading (1 1 1)
  hex (22 23 10 5 42 43 37 36) ($N $out $out) simpleGrading (1 1 1)
  hex (44 33 35 45 29 0 12 28) ($out $N $out) simpleGrading (1 1 1)
  hex (4 14 30 31 39 38 47 46) ($N $out $out) simpleGrading (1 1 1)
  hex (49 32 33 48 17 1 0 16) ($out $N $out) simpleGrading (1 1 1)
  hex (34 51 50 35 8 24 25 12) ($out $N $out) simpleGrading (1 1 1)
);

edges
(
  project 2 3 (sph_i)
  project 2 9 (sph_i)
  project 9 13 (sph_i)
  project 3 13 (sph_i)
  project 2 6 (sph_i)
  project 9 11 (sph_i)
  project 3 7 (sph_i)
  project 13 15 (sph_i)
  project 7 15 (sph_i)
  project 15 11 (sph_i)
  project 11 6 (sph_i)
  project 7 6 (sph_i)


);

faces
(
  project (3 2 9 13) sph_i
  project (3 2 6 7) sph_i
  project (2 9 11 6) sph_i
  project (9 11 15 13) sph_i
  project (7 6 11 15) sph_i
  project (3 13 7 15) sph_i
);

boundary
(
);

mergePatchPairs
(
);


// ************************************************************************* //
